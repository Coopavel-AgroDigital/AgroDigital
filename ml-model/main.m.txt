clear
clc

% Parameter selection
tr_percentage = 0.6;
MaxEpochs = 3;
MiniBatchSize = 8;
inputSize = [224 224 3];
numAnchors = 3;
InitialLearnRate = 1e-2;
featureExtractionNetwork = resnet50;
featureLayer = 'activation_40_relu';
optimizer = 'sgdm';

% Create checkpoint directory
tempdir = './tmp';

if exist(tempdir, 'dir') == 7
    rmdir(tempdir)
    mkdir(tempdir)
else
    mkdir(tempdir)
end

% GPU to utilise
d = gpuDevice(1);
% Load pig labels dataset

% Load labels
load('C:\Users\mathe\Downloads\cardoso\Annotation for postures and drinking\model.mat')

% Add training image path
addpath('C:\Users\mathe\Downloads\cardoso\Annotation for postures and drinking\Image_sequence')

% Set random seed to ensure example training reproducibility.
rng(0);

% Randomly split data into a training and test set.
shuffledIndices = randperm(height(croppedData2));
idx = floor(tr_percentage * length(shuffledIndices) );
trainingDataTbl = croppedData2(shuffledIndices(1:idx),:);
testDataTbl = croppedData2(shuffledIndices(idx+1:end),:);

%
%% creating datastores for loading the image and label data during training and evaluation.
imdsTrain = imageDatastore(trainingDataTbl{:,'Filename'});
bldsTrain = boxLabelDatastore(trainingDataTbl(:,2:end));
imdsTest = imageDatastore(testDataTbl{:,'Filename'});
bldsTest = boxLabelDatastore(testDataTbl(:,2:end));


%
%% Combine image and box label datastores.
trainingData = combine(imdsTrain,bldsTrain);
testData = combine(imdsTest,bldsTest);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Display one of the training images and box labels.
data = read(trainingData);
I = data{1};
bbox = data{2};
annotatedImage = insertShape(I,'Rectangle',bbox);
annotatedImage = imresize(annotatedImage,2);
figure
imshow(annotatedImage)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Define the number of object classes to detect.
numClasses = width(croppedData2)-1;

% Estimating anchor boxes based on the size of objects in the training data
trainingDataForEstimation = transform(trainingData,@(data)preprocessData(data,inputSize));
[anchorBoxes, meanIoU] = estimateAnchorBoxes(trainingDataForEstimation, numAnchors);

% Creating the YOLO object detection network.
lgraph = yolov2Layers(inputSize,numClasses,anchorBoxes,featureExtractionNetwork,featureLayer);

% Data Augmentation
augmentedTrainingData = transform(trainingData,@augmentData);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Visualize the augmented images.
augmentedData = cell(4,1);
for k = 1:4
    data = read(augmentedTrainingData);
    augmentedData{k} = insertShape(data{1},'Rectangle',data{2});
    reset(augmentedTrainingData);
end
figure
montage(augmentedData,'BorderSize',10)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% Preprocessing the augmented training data to prepare for training.
preprocessedTrainingData = transform(augmentedTrainingData,@(data)preprocessData(data,inputSize));
preprocessedTestData = transform(testData,@(data)preprocessData(data,inputSize));

% Reading the preprocessed training data. %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
data = read(preprocessedTrainingData);

% Displaying the image and bounding boxes.
I = data{1};
bbox = data{2};
annotatedImage = insertShape(I,'Rectangle',bbox);
annotatedImage = imresize(annotatedImage,2);
figure
imshow(annotatedImage)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

options = trainingOptions(optimizer, ...
    'MiniBatchSize', MiniBatchSize, ....
    'InitialLearnRate',InitialLearnRate, ...
    'MaxEpochs',MaxEpochs,...
    'CheckpointPath', tempdir);

% Train the YOLO v2 detector.
[detector,info] = trainYOLOv2ObjectDetector(preprocessedTrainingData,lgraph,options);
detectionResults = detect(detector, preprocessedTestData);
[ap,recall,precision] = evaluateDetectionPrecision(detectionResults, preprocessedTestData);
MAP = mean(ap);

% End GPU session
gpuDevice([])
